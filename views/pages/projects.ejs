<!DOCTYPE html>

<html>
    <head> 
        <title>My Projects</title>
        <link rel="stylesheet" href="/css/style.css">
    </head>
    <body style = "margin:0;">

        <div class="header">
            <img src="/img/RoundHeadshot.png" style="vertical-align:middle;border-color: #01395a;border-radius: 50% !important;" width = "200" height = "200" alt="Email">
            <h1>Greetings, I'm Seaghan Ennis</h1>
            <h2 color="white">Software Developer</h2>
        </div> 

        <div class="navbar" style="border-bottom-width: 20px;">
            <ul>
                <li><a href="/">Home</a></li>
                <li><a href="/projects">My Projects</a></li>
                <li><a href="/" float="inline-start" left="50%">Hire Me</a></li>
            </ul>
    
        </div>

        <div class="row">
            <div class="mainP">
                <h1>A Compiler Written in Java</h1>
                <p>Specifications: <ul>
                    <li>This was a senior capstone project with specifications provided by the instructor</li>
                    <li>Top-Down Recursive Compiler with lexical, syntactic, and code generation steps</li>
                    <li>Written in Java for a custom program language input</li>
                    <li>Included own interpreter for quads after code generation</li>
                </ul></p>
                <p>GitHub Repository/Full Code: <a href="https://github.com/seaghan2000/compiler-capstone"><img src="/img/GitHub.png" style="vertical-align:middle" width = "32" height = "32" alt="GitHub"></a></p>
            </div>
            <div class="sideP">
                <h1>How It Was Made</h1>
                <p>This is a top-down recursive descent compiler which means it goes down line by line and generates code using a context free grammar. It utilizes a reserve table, a symbol table</p>
                <p>A compiler has multiple stages that it goes through to processes a program. The primary stages are lexical, syntax, semantic, and code generation. This project has all of these stages except semantic.</p>
                <p>The Lexical step looks through input lines and tries to match each lexeme (or word) to a catagorey of tokens. It recognizes compiler reserve words and tokens specific to the language such as IF or =: which is used for assignment.</p>
                <p>The Syntax step makes sure that the lexemes from the previous step are sequenced in a valid way according to the CFG rules of the language.</p>
                <p>The Semantic step which is not included would allow for type checking, array bounds checking, function calls, and object orientation.</p>
                <p>Lastly the code generation step makes quad codes which are made in the vein of a 32-bit assembly instruction. It assigns new variables and updates the symbol table.</p>
                <p>Once all of the quad codes have been generated, then an interpreter runs through them line by line until reach a designated stop quad. The interpreter will update the symbol table with current information as it progresses.</p>
            </div>

        </div>

        <div class="row">
            <div class="mainP">
                <h1>Invoice Formatter</h1>
                <p>Specifications: <ul>
                    <li>Use Python and Python-Docx</li>
                    <li>Able to read and parse awkward inputs</li>
                    <li>Be able to change formmating, spacing, font size and type</li>
                    <li>The total for services rendered and automatically apply discounts</li>
                </ul></p>
                <p>GitHub Repository/Full Code: <a href="https://github.com/seaghan2000/invoice-formatter"><img src="/img/GitHub.png" style="vertical-align:middle" width = "32" height = "32" alt="GitHub"></a></p>
            </div>
            <div class="sideP">
                <h1>How It Was Made</h1>
                <p>I used Python and Python-Docx to create script to help format reciepts in a way that was easier to read.</p>
                <p>The initial tranlation of the reciept format into a .docx made for awkward spacing, usless information, and bad design. This corrects that by changing all of the priormentioned issues.</p>
                <p>The XML format of .docx make it difficult to interact with so the python libaray makes alterations easier.</p>
                <p>The script also adds the subtotals it finds together, applys a given discount, and then appends the new discounted total at the bottom.</p>
            </div>

        </div>

        <div class="row">
            <div class="mainP">
                <h1>A Compilation of Various Exercises and Miniature Scripts</h1>
                <p>Specifications: <ul>
                    <li>A list of smaller programs that performed one or more simple functions</li>
                    <li>Uses multiple different languages to preserve skills</li>
                    <li>Code made to be easy to understand and adapt to new projects</li>
                </ul></p>
                <p>GitHub Repository/Full Code: Coming Soon</p>
            </div>
            <div class="sideP">
                <h1>How It Was Made</h1>
            </div>

        </div>

        <div class="row">
            <div class="mainP" style="border-bottom: hidden;">
                <h1>This Resume Website</h1>
                <p>Specifications: <ul>
                    <li>Run using Node.js</li>
                    <li>Hosted on my own domain</li>
                    <li>Multiple pages using HTML/CSS</li>
                    <li>Avoid using Bootstrap or other similar services</li>
                </ul></p>
                <p>GitHub Repository/Full Code:<a href="https://github.com/seaghan2000/website" style="text-decoration: none;"> &ensp; <img src="/img/GitHub.png" style="vertical-align:middle" width = "32" height = "32" alt="GitHub"></a></p></p>
            </div>
            <div class="sideP">
                <h1>How It Was Made</h1>
                <p>This website was made on a Node.js build and deployed using Heroku.</p>
                <p>I used Heroku's DNS and I pointed my personal domain at the DNS so you could visit my website through Heroku or my own domain.</p>
                <p>The website is built mostly with the Express JavaScript engine as well as EJS as its view engine. HTML and CSS made up the rest of the design and formatting.</p>
                <p>I wanted this to be my creation rather than a Bootstrapped website. I did my best to include a strong sense of style even without the help of prebuilt tools.</p>
                <p>Plain JavaScript runs the page rendering calls which allows you to move between the home page and the projects page.</p>
            </div>

        </div>

        <div class="footer" style="margin: 0px;padding: 20px">
            <h1 style ="text-align: center;">Find or Contact Me On</h1>
            <a href="https://github.com/seaghan2000"  style="text-decoration: none;vertical-align:middle"><img src="/img/GitHub.png" style="vertical-align:middle" width = "64" height = "64" alt="GitHub">&ensp;</a>
                <a href="https://www.facebook.com/seaghan.ennis" style="text-decoration: none;vertical-align:middle"><img src="/img/Facebook.png" style="vertical-align:middle" width = "64" height = "64" alt="Instagram">&ensp;</a>
                <a href="https://www.instagram.com/seaghanennis/?hl=en" style="text-decoration: none;vertical-align:middle"><img src="/img/Instagram.png" style="vertical-align:middle" width = "64" height = "64" alt="Instagram">&ensp;</a>
                <a href="https://www.linkedin.com/in/seaghan-ennis" style="text-decoration: none;vertical-align:middle"><img src="/img/LinkedIn.png" style="vertical-align:middle" width = "64" height = "64" alt="LinkedIn">&ensp;</a>
                <a href="mailto:seaghan00@gmail.com" style="text-decoration: none;"><img src="/img/EmailAlt.png" style="vertical-align:middle" width = "64" height = "64" alt="Email">&ensp;</a>
        </div>


    </body>


</html>
